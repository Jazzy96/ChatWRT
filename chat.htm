<%+header%>

<h2 class="heading">ChatWRT</h2>

<div class="chat-container">
    <div id="chat-messages" class="messages-container">
        <div class="message system">
            <div class="message-content">
                <h3>👋 欢迎使用 ChatWRT!</h3>
                <p>我可以帮你分析:</p>
                <ul>
                    <li>📡 无线网络配置</li>
                    <li>🌐 网络设置</li>
                    <li>🛡️ 防火墙规则</li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="input-container">
        <input type="text" id="user-input" placeholder="请输入你的问题...">
        <button onclick="sendMessage()">发送</button>
    </div>
</div>

<style>
    .heading {
        text-align: center;
        color: #333;
        margin: 20px 0;
    }
    
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 20px;
    }
    
    .messages-container {
        height: 500px;
        overflow-y: auto;
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: #f9f9f9;
    }
    
    .message {
        margin-bottom: 15px;
        padding: 12px;
        border-radius: 8px;
        max-width: 85%;
    }
    
    .message.system {
        background: #f0f0f0;
        margin-left: auto;
        margin-right: auto;
        width: 100%;
    }
    
    .message.user {
        background: #e3f2fd;
        margin-left: auto;
        text-align: right;
    }
    
    .message.assistant {
        background: #f5f5f5;
        margin-right: auto;
    }
    
    .input-container {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }
    
    #user-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
    }
    
    button {
        padding: 12px 24px;
        background: #1976d2;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.3s;
    }
    
    button:hover {
        background: #1565c0;
    }

    /* Markdown 样式 */
    .message-content {
        line-height: 1.6;
        font-size: 14px;
    }
    
    .message-content h1,
    .message-content h2,
    .message-content h3 {
        margin: 16px 0 8px 0;
        color: #333;
    }
    
    .message-content h1 { font-size: 1.5em; }
    .message-content h2 { font-size: 1.3em; }
    .message-content h3 { font-size: 1.1em; }
    
    .message-content p {
        margin: 8px 0;
    }
    
    .message-content ul {
        margin: 8px 0;
        padding-left: 24px;
        list-style-type: disc;
    }
    
    .message-content li {
        margin: 4px 0;
    }
    
    .message-content code {
        background: #f0f0f0;
        padding: 2px 4px;
        border-radius: 3px;
        font-family: monospace;
        font-size: 0.9em;
    }
    
    .message-content pre {
        background: #f6f8fa;
        padding: 12px;
        border-radius: 6px;
        overflow-x: auto;
        margin: 8px 0;
    }
    
    .message-content pre code {
        background: none;
        padding: 0;
    }
    
    .message-content table {
        width: 100%;
        border-collapse: collapse;
        margin: 8px 0;
    }
    
    .message-content th,
    .message-content td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    
    .message-content blockquote {
        margin: 8px 0;
        padding-left: 12px;
        border-left: 4px solid #ddd;
        color: #666;
    }
    
    .message-content strong {
        color: #d32f2f;
        font-weight: bold;
    }
    
    .message-content em {
        color: #1976d2;
        font-style: italic;
    }
</style>

<script type="text/javascript">
// 简化版的 Markdown 解析器
function formatMessage(content) {
    if (typeof content !== 'string') {
        return content;
    }
    
    return content
        // 代码块
        .replace(/```(\w*)\n([\s\S]*?)```/g, '<pre><code>$2</code></pre>')
        // 标题
        .replace(/^### (.*$)/gm, '<h3>$1</h3>')
        .replace(/^## (.*$)/gm, '<h2>$1</h2>')
        .replace(/^# (.*$)/gm, '<h1>$1</h1>')
        // 表格
        .replace(/^\|(.+)\|$/gm, function(_, content) {
            const cells = content.split('|').map(cell => cell.trim());
            return '<tr>' + cells.map(cell => '<td>' + cell + '</td>').join('') + '</tr>';
        })
        .replace(/(<tr>.*?<\/tr>)\n(<tr>.*?<\/tr>)/gs, '<table>$1$2</table>')
        // 列表
        .replace(/^[\s]*[-*+] (.*)$/gm, '<li>$1</li>')
        .replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>')
        // 强调
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        // 行内代码
        .replace(/`([^`]+)`/g, '<code>$1</code>')
        // 引用
        .replace(/^> (.*)$/gm, '<blockquote>$1</blockquote>')
        // 段落
        .replace(/\n\n/g, '</p><p>')
        // 保持换行
        .replace(/\n/g, '<br>');
}

function appendMessage(content, type) {
    const messagesDiv = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message ' + type;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    
    if (type === 'assistant') {
        contentDiv.innerHTML = formatMessage(content);
    } else {
        contentDiv.textContent = content;
    }
    
    messageDiv.appendChild(contentDiv);
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function sendMessage() {
    const input = document.getElementById('user-input');
    const query = input.value.trim();
    
    if (!query) return;
    
    appendMessage(query, 'user');
    input.value = '';
    
    const queryUrl = '<%=url("admin/services/chatwrt/query")%>';
    
    fetch(queryUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
        },
        body: JSON.stringify({ query: query }),
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.error) {
            appendMessage('错误: ' + data.error, 'system');
        } else {
            appendMessage(data.response, 'assistant');
        }
    })
    .catch(error => {
        appendMessage('错误: ' + error.toString(), 'system');
        console.error('Error:', error);
    });
}

document.getElementById('user-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});
</script>

<%+footer%>

